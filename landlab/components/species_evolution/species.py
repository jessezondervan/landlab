#!/usr/bin/env python
"""Base Species object of SpeciesEvolver.
"""
import numpy as np


class Species(object):
    """The SpeciesEvolver base species.

    Species contains

    The identifier is a two element tuple automatically generated by
    SpeciesEvolver. The first element is the clade id designated by a letter or
    letters. The second element is the species number that is assigned
    sequentially for each clade. The clade id is passed to child species.
    """
    def __init__(self, initial_zones, parent_species=None, parameters=None):
        """Initialize a species.

        Parameters
        ----------
        initial_zones : Zone or Zone list
            An individual or list of SpeciesEvolver Zones where the species
            is located.
        parent_species : SpeciesEvolver Species
            The parent species object. The default value, 'None' indicates no
            parent species.
        minimum_area : float, optional
            The minimum area in which the species can persist.
        """
        # Set parameters.

        self._identifier = None
        self._parent_species = parent_species
        self._parameters = parameters

        # Set initial zone(s).

        if isinstance(initial_zones, list):
            zone_list = initial_zones
        else:
            zone_list = [initial_zones]

        self.zones = zone_list

    @property
    def identifier(self):
        """Get the species identifier.

        Returns
        -------
        identifier : tuple
            The unique identifier of the species. The first element is the
            clade of a species represented by a string. The second element is
            the species number represented by an integer.
        """
        return self._identifier

    @property
    def parent_species(self):
        return self._parent_species

    @property
    def clade(self):
        """Get the species clade identifier.

        Returns
        -------
        clade_identifier : string
            The string representation of the clade of the species.
        """
        return self._identifier[0]

    @property
    def zones(self):
        return self._zones

    @zones.setter
    def zones(self, zones):
        self.zones = self._get_suitable_zones(zones)

    def _evolve(self, time):
        """Run the evolutionary processes of the species.

        Extinction is not explicitly implemented in this method. The base class
        of species leaves extinction to the disappearance of the range of a
        species.

        Parameters
        ----------
        time : float
            The time in the simulation.

        Returns
        -------
        boolean
            `True` indicates this species persists. `False` indicates this
            species has become extinct.
        Species list
            A list of SpeciesEvolver species objects that are the child species
            that result from the macroevolutionary processes run. An empty list
            indicates no child species.
        """
        persist_list = []
        child_species = []

        # The current zones, `self.zones` act as the origin zone. The
        # destinations of each origin are

        for origin in self.zones:
            path_type = origin.path[time][0]
            destinations = origin.path[time][1]
            suitable_zones = self._get_suitable_zones(destinations)

            if suitable_zones:
                # Handle zones by path type.

                func_name = '_evolve_zone_' + path_type.replace('-', '_')
                evolve_zone_func = getattr(self, func_name)

                persist_in_zone, children = evolve_zone_func(suitable_zones)
                persist_list.append(persist_in_zone)
                child_species.extend(children)
            else:
                persist_list.append(False)

        species_persists = self._determine_species_persistance(persist_list)

        # Create a unique array of child species.
        child_species = np.array(list(set(child_species)))

        return species_persists, child_species

    def _get_suitable_zones(self, candidate_zones):
        return candidate_zones

    def _determine_species_persistance(self, species_persist_list):
        """Determine species persistance across zones.

        Parameters
        ----------
        species_persist_list : boolean list
            Each element indicates if the species persists in a zone.

        Returns
        -------
        boolean
            `True` indicates this species persists. `False` indicates this
            species has become extinct.
        """
        return np.any(species_persist_list)

    # Evolve by zone path type methods

    def _evolve_zone_one_to_none(self, zones):
        species_persists = False
        child_species = []

        return species_persists, child_species

    def _evolve_zone_one_to_one(self, zones):
        self._zones = zones

        # The species in this zone disperses to/remains in the zone.
        species_persists = True
        child_species = []

        return species_persists, child_species

    def _evolve_zone_one_to_many(self, zones):
        species_persists = False
        child_species = []

        for z in zones:
            child = Species(z, parent_species=self,
                            parameters=self._parameters)
            child_species.append(child)

        return species_persists, child_species

    def _evolve_zone_many_to_none(self, zones):
        species_persists = False
        child_species = []

        return species_persists, child_species

    def _evolve_zone_many_to_one(self, zones):
        return self._evolve_zone_one_to_one(zones)

    def _evolve_zone_many_to_many(self, zones):
        return self._evolve_zone_one_to_many(zones)
