#!/usr/bin/env python
"""Base Species object of SpeciesEvolver.
"""

class Species(object):
    """The base species of SpeciesEvolver.

    Species contains

    The identifier is a two element tuple automatically generated by
    SpeciesEvolver. The first element is the clade id designated by a letter or
    letters. The second element is the species number that is assigned
    sequentially for each clade. The clade id is passed to child species.
    """

    def __init__(self, initial_zones, parent_species=None,
                 allopatric_wait_time=0, pseudoextinction=True):
        """Initialize a species.

        Parameters
        ----------
        initial_zones : Zone or Zone list
            An individual or list of SpeciesEvolver Zones where the species
            is located.
        parent_species : Species, optional
            A SpeciesEvolver species that is the parent species. The default
            value, 'None' indicates no parent species.
        allopatric_wait_time : float, optional
            The delay in model time between geographic seperation and
            speciation. Speciation occurs at the first time step when the delay
            is exceeded. The default value of 0 indicates speciation occurs at
            the same time step when geographic serperation occurs.
        pseudoextinction : boolean, optional
            When 'True', species become extinct when it speciates into child
            species.
        """
        # Set parameters.

        self._identifier = None
        self._parent_species = parent_species
        self._allopatric_wait_time = allopatric_wait_time
        self._pseudoextinction = pseudoextinction

        # Set initial zone(s).

        if isinstance(initial_zones, list):
            zone_list = initial_zones
        else:
            zone_list = [initial_zones]

        self._zones = dict.fromkeys(zone_list, {})

    @property
    def identifier(self):
        """Get the species identifier.

        Returns
        -------
        identifier : tuple
            The unique identifier of the species. The first element is the
            clade of a species represented by a string. The second element is
            the species number represented by an integer.
        """
        return self._identifier

    @property
    def parent_species(self):
        return self._parent_species

    @property
    def clade(self):
        """Get the species clade identifier.

        Returns
        -------
        clade_identifier : string
            The clade identifier of the species.
        """
        return self._identifier[0]

    @property
    def zones(self):
        return list(self._zones.keys())

    @property
    def extant(self):
        return len(self.zones) > 0

    def _evolve(self, time, dt, record_add_on):
        """Run the evolutionary processes of the species.

        Extinction effectively occurs when the species attribute, *zones*
        returns an empty list.

        Parameters
        ----------
        time : float
            The time in the simulation.
        dt : float
            The model time step duration.
        record_add_on : defaultdict
            A dictionary to pass values to the SpeciesEvolver record.

        Returns
        -------
        Species list
            A list of SpeciesEvolver species objects that are the child species
            that result from the macroevolutionary processes run. An empty list
            indicates no child species.
        """
        new_zones = []

        # Disperse: `self.zones` are the origin zones.

        for origin in self.zones:
            path_type = origin.path[time][0]
            candidate_destinations = origin.path[time][1]

            # Get disperse function for path type.
            func_name = '_disperse_zone_' + path_type.replace('-', '_')
            disperse_func = getattr(self, func_name)

            new_zones_of_origin = disperse_func(candidate_destinations)
            new_zones.extend(new_zones_of_origin)

        self._update_zones(new_zones)

        child_species = self._speciate(dt)

        if self._pseudoextinction and len(child_species) > 0:
            self._zones = {}

        self._update_record(record_add_on, child_species)

        return child_species

    def _update_zones(self, new_zones):
        new_zones = dict.fromkeys(new_zones, {})

        for z in new_zones.keys():
            if z in self._zones.keys():
                new_zones[z] = {**new_zones[z], **self._zones[z]}

        self._zones = new_zones

    def _update_record(self, record, child_species):
        pseudoextinct = self._pseudoextinction and len(child_species) > 0

        record['speciation_count'] += len(child_species)
        record['extinction_count'] += (not pseudoextinct and not self.extant)
        record['pseudoextinction_count'] += pseudoextinct

    # Macroevolutionary process methods

    def _disperse_zone_one_to_none(self, candidate_zones):
        return []

    def _disperse_zone_one_to_one(self, candidate_zones):
        # The species in this zone disperses to/remains in the same zone.
        return candidate_zones

    def _disperse_zone_one_to_many(self, candidate_zones):
        return candidate_zones

    def _disperse_zone_many_to_none(self, candidate_zones):
        return []

    def _disperse_zone_many_to_one(self, candidate_zones):
        return candidate_zones

    def _disperse_zone_many_to_many(self, candidate_zones):
        return candidate_zones

    def _speciate(self, dt):
        child_species = []
        wait_time = self._allopatric_wait_time
        key = 'time_to_allopatric_speciation'

        for z in self.zones:
            # Update remaining time to allopatric speciation.

            if len(self.zones) > 1 and not key in self._zones[z]:
                self._zones[z][key] = wait_time
            elif key in self._zones[z] and self._zones[z][key] > 0:
                self._zones[z][key] -= dt

            # Speciate if time is reached.

            if key in self._zones[z] and self._zones[z][key] <= 0:
                child = Species(z, parent_species=self,
                                allopatric_wait_time=wait_time)
                child_species.append(child)

                del self._zones[z][key]

        return child_species
